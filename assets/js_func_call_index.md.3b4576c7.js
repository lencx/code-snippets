import{_ as n,c as a,o as s,d as e}from"./app.26afa5f0.js";const t='{"title":"👉 call","description":"","frontmatter":{},"headers":[{"level":2,"title":"💠 语法","slug":"💠-语法"},{"level":2,"title":"🟠 示例","slug":"🟠-示例"},{"level":2,"title":"🤔 思考","slug":"🤔-思考"},{"level":2,"title":"✍️ 实现","slug":"✍️-实现"},{"level":2,"title":"📌 测试","slug":"📌-测试"},{"level":2,"title":"🔗 参考","slug":"🔗-参考"}],"relativePath":"js/func/call/index.md","lastUpdated":1632544186513}',o={},p=[e('<h1 id="👉-call" tabindex="-1">👉 call <a class="header-anchor" href="#👉-call" aria-hidden="true">#</a></h1><blockquote><p>call() 方法使用一个指定的 this 值和单独给出的一个或多个参数来调用一个函数</p></blockquote><h2 id="💠-语法" tabindex="-1">💠 语法 <a class="header-anchor" href="#💠-语法" aria-hidden="true">#</a></h2><div class="language-js"><pre><code><span class="token keyword">function</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>thisArg<span class="token punctuation">,</span> arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="🟠-示例" tabindex="-1">🟠 示例 <a class="header-anchor" href="#🟠-示例" aria-hidden="true">#</a></h2><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;lencx&#39;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token function">sayHello</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">&#39;welcome&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// welcome lencx</span>\n</code></pre></div><p>示例输出 <code>welcome lencx</code>，以上面例子分析一个调用函数的基本原理，我们就会注意到这些：</p><ol><li><p>调用原型函数 <code>call</code> 改变了 <code>this</code> 的指向。即调用函数变成了 <code>obj.sayHello</code></p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;lencx&#39;</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">sayHello</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\nobj<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token string">&#39;welcome&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// welcome lencx</span>\n</code></pre></div></li><li><p>传递给 <code>sayHello.call</code> 的任意参数作为 <code>arg1, arg2, ...</code> 传递给原始 <code>sayHello</code></p></li><li><p>不会对 <code>obj</code> 和 <code>sayHello</code> 产生副作用。即调用 <code>call</code> 不会以任何方式修改原始 <code>obj</code> 或 <code>sayHello</code></p></li></ol><h2 id="🤔-思考" tabindex="-1">🤔 思考 <a class="header-anchor" href="#🤔-思考" aria-hidden="true">#</a></h2><blockquote><p>TODO</p></blockquote><h2 id="✍️-实现" tabindex="-1">✍️ 实现 <a class="header-anchor" href="#✍️-实现" aria-hidden="true">#</a></h2><div class="language-js"><pre><code>\n</code></pre></div><h2 id="📌-测试" tabindex="-1">📌 测试 <a class="header-anchor" href="#📌-测试" aria-hidden="true">#</a></h2><div class="language-js"><pre><code>\n</code></pre></div><hr><h2 id="🔗-参考" tabindex="-1">🔗 参考 <a class="header-anchor" href="#🔗-参考" aria-hidden="true">#</a></h2>',16)];var c=n(o,[["render",function(n,e,t,o,c,l){return s(),a("div",null,p)}]]);export{t as __pageData,c as default};
