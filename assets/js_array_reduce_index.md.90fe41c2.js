import{_ as n,c as a,o as s,d as t}from"./app.26afa5f0.js";const e='{"title":"👉 reduce","description":"","frontmatter":{},"headers":[{"level":2,"title":"💠 语法","slug":"💠-语法"},{"level":2,"title":"✍️ 实现","slug":"✍️-实现"},{"level":2,"title":"📌 测试","slug":"📌-测试"},{"level":2,"title":"🔗 参考","slug":"🔗-参考"}],"relativePath":"js/array/reduce/index.md","lastUpdated":1632544186513}',p={},o=[t('<h1 id="👉-reduce" tabindex="-1">👉 reduce <a class="header-anchor" href="#👉-reduce" aria-hidden="true">#</a></h1><blockquote><p>reduce() 方法对数组中的每个元素执行一次 reducer 函数(升序执行)，将其结果汇总为单个返回值</p></blockquote><h2 id="💠-语法" tabindex="-1">💠 语法 <a class="header-anchor" href="#💠-语法" aria-hidden="true">#</a></h2><div class="language-js"><pre><code>arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token function">callback</span><span class="token punctuation">(</span>accumulator<span class="token punctuation">,</span> currentValue<span class="token punctuation">[</span><span class="token punctuation">,</span> index<span class="token punctuation">[</span><span class="token punctuation">,</span> array<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">,</span> initialValue<span class="token punctuation">]</span><span class="token punctuation">)</span>\n</code></pre></div><ul><li><code>callback</code> - 为数组中每个元素（如果没有提供 <code>initialValue</code> 则使用数组中第一个元素）执行的函数，包含四个参数： <ul><li><code>accumulator</code> - 累计器累计回调的返回值; 它是上一次调用回调时返回的累积值，或 <code>initialValue</code>（见于下方）</li><li><code>currentValue</code> - 数组中当前正在处理的元素</li><li><code>index</code> [可选] - 正在处理的元素在数组中的索引，如果提供了 <code>initialValue</code>，则起始索引号为 <code>0</code>，否则从索引 <code>1</code> 起始</li><li><code>array</code> [可选] - 调用 reduce 方法的数组本身</li></ul></li><li><code>initialValue</code> [可选] - 作为第一次调用 <code>callback</code> 函数时的第一个参数的值。 如果没有提供初始值，则将使用数组中的第一个元素。 在没有初始值的空数组上调用 <code>reduce</code> 将报错。</li><li>返回值 - 函数累计处理的结果</li></ul><h2 id="✍️-实现" tabindex="-1">✍️ 实现 <a class="header-anchor" href="#✍️-实现" aria-hidden="true">#</a></h2><div class="language-js"><pre><code><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myReduce</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">callback<span class="token punctuation">,</span> initialVal</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 初始值是一个可选参数</span>\n  <span class="token keyword">var</span> accumulator <span class="token operator">=</span> initialVal <span class="token operator">||</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>\n  <span class="token comment">// TODO: 未处理边界情况，详情可查看 MDN 文档</span>\n  <span class="token comment">// https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce#polyfill</span>\n  <span class="token comment">// 1. 如果 callback 为 null 或非 function，则报错</span>\n  <span class="token comment">// 2. 如果数组为空，并且不存在初始值，则报错</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>accumulator<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      accumulator <span class="token operator">=</span> <span class="token function">callback</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>accumulator<span class="token punctuation">,</span> accumulator<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      accumulator <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> accumulator<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="📌-测试" tabindex="-1">📌 测试 <a class="header-anchor" href="#📌-测试" aria-hidden="true">#</a></h2><div class="language-js"><pre><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> val <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">myReduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> cur</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> acc <span class="token operator">+</span> cur<span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token comment">// 10</span>\n</code></pre></div><hr><h2 id="🔗-参考" tabindex="-1">🔗 参考 <a class="header-anchor" href="#🔗-参考" aria-hidden="true">#</a></h2><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce" target="_blank" rel="noopener noreferrer">[MDN] NodeList.prototype.reduce()</a></li></ul>',12)];var c=n(p,[["render",function(n,t,e,p,c,l){return s(),a("div",null,o)}]]);export{e as __pageData,c as default};
